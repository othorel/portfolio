generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id           Int          @id @default(autoincrement())
  login        String       @unique
  email        String       @unique
  passwordHash String
  avatar       String?      @default("")
  status       String       @default("online")
  role         Role         @default(USER)
  profile      Profile?
  posts        Post[]
  friendships  Friendship[] @relation("UserFriendships")
  friendOf     Friendship[] @relation("FriendFriendships")
  notifications Notification[]
}

model Friendship {
  id        Int              @id @default(autoincrement())
  user      User             @relation("UserFriendships", fields: [userId], references: [id])
  userId    Int
  friend    User             @relation("FriendFriendships", fields: [friendId], references: [id])
  friendId  Int
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())

  @@unique([userId, friendId])
}

model Profile {
  id      Int    @id @default(autoincrement())
  bio     String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String
  content    String?
  published  Boolean   @default(true)
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  categories Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
