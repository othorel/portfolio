generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model User {
  id             Int                       @id @default(autoincrement())
  login          String                    @unique
  email          String                    @unique
  passwordHash   String
  avatar         String?                   @default("")
  status         String                    @default("online")
  role           Role                      @default(USER)
  profile        Profile?
  posts          Post[]
  friendships    Friendship[]              @relation("UserFriendships")
  friendOf       Friendship[]              @relation("FriendFriendships")
  notifications  Notification[]
  sentMessages   Message[]                 @relation("SenderMessages")
  conversations  ConversationParticipant[]
}

model Friendship {
  id        Int              @id @default(autoincrement())
  user      User             @relation("UserFriendships", fields: [userId], references: [id])
  userId    Int
  friend    User             @relation("FriendFriendships", fields: [friendId], references: [id])
  friendId  Int
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())

  @@unique([userId, friendId])
}

model Profile {
  id      Int    @id @default(autoincrement())
  bio     String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String
  content    String?
  published  Boolean   @default(true)
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  categories Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Conversation {
  id           Int                        @id @default(autoincrement())
  title        String?                    // pour les groupes
  isGroup      Boolean      @default(false)
  privateKey   String?      @unique       // pour les conversations 1:1 -> "minId_maxId"
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  participants ConversationParticipant[]
  messages     Message[]

  @@index([createdAt])
  @@index([updatedAt])
}

model ConversationParticipant {
  id                 Int          @id @default(autoincrement())
  conversation       Conversation @relation(fields: [conversationId], references: [id])
  conversationId     Int
  user               User         @relation(fields: [userId], references: [id])
  userId             Int
  role               String?
  joinedAt           DateTime     @default(now())
  lastReadMessage    Message?     @relation("LastReadMessage", fields: [lastReadMessageId], references: [id])
  lastReadMessageId  Int?

  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             Int                        @id @default(autoincrement())
  conversation   Conversation               @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User                       @relation("SenderMessages", fields: [senderId], references: [id])
  senderId       Int
  content        String?
  metadata       Json?
  status         MessageStatus              @default(SENT)
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  deletedAt      DateTime?

  attachments    MessageAttachment[]
  readBy         ConversationParticipant[]  @relation("LastReadMessage")

  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
  @@index([status])
}

model MessageAttachment {
  id        Int     @id @default(autoincrement())
  message   Message @relation(fields: [messageId], references: [id])
  messageId Int
  url       String
  mime      String?
  size      Int?
}
